services:
  # Backend Application Service
  app:
    image: ${DOCKERHUB_USERNAME}/${BACKEND_IMAGE_NAME}:${BACKEND_IMAGE_TAG}
    container_name: iod-app
    environment:
      - NODE_ENV=production
      - MONGO_URI=mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/${MONGO_DB_NAME}?authSource=admin&directConnection=true
      - MONGO_DB_NAME=${MONGO_DB_NAME}
      - PORT=${APP_PORT}
    expose:
      - "${APP_PORT}"
    networks:
      - app-network
    depends_on:
      - mongodb
    restart: unless-stopped
    labels: 
      - "watchtower.enable=true"
    command: > 
      sh -c "npm start"

  mongodb:
    image: mongo:4.4.18
    container_name: iod-mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    volumes:
      - mongodb-configdb:/data/configdb
      - mongodb-db:/data/db
    expose:
      - "27017"
    networks:
      - app-network
    restart: unless-stopped

  # Nginx Reverse Proxy Service
  nginx:
    image: nginx:latest
    container_name: iod-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf.template:/etc/nginx/templates/default.conf.template:ro
    environment:
      - APP_PORT=${APP_PORT}
      - FRONTEND_INTERNAL_PORT=${FRONTEND_INTERNAL_PORT}
    ports:
      - "${NGINX_EXTERNAL_PORT}:80"
    networks:
      - app-network
    depends_on:
      - app
    restart: unless-stopped
    labels:
      - "watchtower.enable=true"

  # Watchtower Service
  watchtower:
    image: containrrr/watchtower
    container_name: iod-watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 300 --cleanup --label-enable
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mongodb-configdb:
  mongodb-db: